import { useState, useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { Contract, providers } from "ethers";
import styles from "../styles/Home.module.css";
import { Web3Provider } from "@ethersproject/providers";
import { WHITELIST_ADDRESS, ABI } from "../constants";

const Home: NextPage = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState<Web3Provider>();
  const [loading, setLoading] = useState(false);
  const [currentAccount, setCurrentAccount] = useState("");
  const [isWhitelisted, setIsWhitelisted] = useState(false);
  const [numWhitelisted, setNumWhitelisted] = useState(0);
  const [errorMessage, setErrorMessage] = useState(false);

  // Get the number of whitelisted addresses
  const getNumberOfWhitelistedAddresses = async () => {
    try {
      const _provider = await getProviderOrSigner();
      const whitelistContract = new Contract(WHITELIST_ADDRESS, ABI, _provider);
      const _numWhitelisted = await whitelistContract.numAddressesWhitelisted();
      setNumWhitelisted(_numWhitelisted);
    } catch (e: any) {
      setErrorMessage(e.message);
    }
  };

  // To automatically connect your wallet if you've connected before
  useEffect(() => {
    const checkIfConnected = async () => {
      const p = new providers.Web3Provider(window.ethereum);
      const accounts = await p?.listAccounts();

      if (accounts?.length !== 0) {
        setCurrentAccount(accounts[0]);
        setIsConnected(true);
      } else {
        setIsConnected(false);
      }
    };
    const _provider = new providers.Web3Provider(window.ethereum);
    setProvider(_provider);
    checkIfConnected();
  }, []);

  useEffect(() => {
    getNumberOfWhitelistedAddresses();
  }, [isConnected]);

  // For handling account changes
  useEffect(() => {
    const handleAccountChange = async () => {
      if (provider) {
        const accounts = await provider.listAccounts();
        if (accounts.length !== 0) {
          setCurrentAccount(accounts[0]);
        } else {
          setIsConnected(false);
        }
      }
    };

    if (isConnected) {
      window.ethereum.on("accountsChanged", handleAccountChange);
    }

    return () => {
      if (isConnected) {
        window.ethereum.removeListener("accountsChanged", handleAccountChange);
      }
    };
  }, [isConnected, currentAccount]);

  const getProviderOrSigner = async (needSigner = false) => {
    const { chainId } = await provider?.getNetwork(); // Ignore the error, it exists
    if (chainId !== 4) {
      window.alert("Pls change to the Rinkeby test network");
      return;
    }

    if (needSigner) {
      const signer = provider?.getSigner();
      return signer;
    }

    return provider;
  };

  // Connect wallet
  const connectWallet = async () => {
    setLoading(true);

    try {
      await window.ethereum.request({ method: "eth_requestAccounts" });

      const accounts = await provider?.listAccounts();
      setCurrentAccount(accounts[0]);

      setIsConnected(true);
    } catch (e) {
      console.error(e);
    }
    setLoading(false);
  };

  // Add address to whitelist
  const joinWhitelist = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const whitelistContract = new Contract(WHITELIST_ADDRESS, ABI, signer);
      const tx = await whitelistContract.addAddressToWhitelist();
      await tx.wait();
      await getNumberOfWhitelistedAddresses();
    } catch (e: any) {
      setErrorMessage(e.message);
      return;
    }
  };

  const checkIfWhitelisted = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const address = await signer?.getAddress();
      const whitelistContract = new Contract(WHITELIST_ADDRESS, ABI, signer);
      const _isWhitelisted = await whitelistContract.whitelistedAddresses(
        address
      );
      setIsWhitelisted(_isWhitelisted);
    } catch (e: any) {
      setErrorMessage(e.message);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>NFT Collection</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {!isConnected ? (
          <button onClick={connectWallet}>
            {loading ? "Loading..." : "Connect"}
          </button>
        ) : (
          <>
            <p>Connected with: {currentAccount}</p>
            <button onClick={joinWhitelist}>Join Whitelist</button>
            {numWhitelisted > 0 && (
              <p>
                {numWhitelisted} {`address${numWhitelisted !== 1 ? "es" : ""}`}{" "}
                whitelisted.
              </p>
            )}

            <button>Test button</button>
          </>
        )}
      </main>
    </div>
  );
};

export default Home;
